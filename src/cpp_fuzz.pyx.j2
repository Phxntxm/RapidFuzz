# distutils: language=c++
# cython: language_level=3
# cython: binding=True

{% macro normalize_text(text) -%}
{{ text.split('\n') | map('trim') | join('\n') | trim }}
{%- endmacro -%}

{% macro ratio_call(func_name) -%}
string1 = conv_sequence(s1)
try:
    string2 = conv_sequence(s2)
    try:
        return {{func_name}}(string1, string2, c_score_cutoff)
    finally:
        if string2.allocated:
            free(string2.data)
finally:
    if string1.allocated:
        free(string1.data)
{%- endmacro -%}

{% macro ratio_impl(ratio_name) %}
cdef double c_score_cutoff = 0.0 if score_cutoff is None else score_cutoff

if s1 is None or s2 is None:
    return 0

if processor is True or processor == default_process:
    {{ ratio_call(ratio_name + "_default_process") | indent(4) }}
elif callable(processor):
    s1 = processor(s1)
    s2 = processor(s2)

{{ ratio_call(ratio_name + "_no_process") }}
{%- endmacro -%}

{% macro ratio_help(processor_default, description, notes, examples) -%}
"""
{{ normalize_text(description)  }}

Parameters
----------
s1 : str
    First string to compare.
s2 : str
    Second string to compare.
processor: bool or callable, optional
    Optional callable that is used to preprocess the strings before
    comparing them. When processor is True ``utils.default_process``
    is used.
{%- if processor_default == "True" %} Default is True.
{% else %} Default is None, which deactivates this behaviour.
{% endif %}
score_cutoff : float, optional
    Optional argument for a score threshold as a float between 0 and 100.
    For ratio < score_cutoff 0 is returned instead. Default is 0,
    which deactivates this behaviour.

Returns
-------
similarity : float
    similarity between s1 and s2 as a float between 0 and 100

{% if notes -%}
Notes
-----

{{ normalize_text(notes)  }}
{% endif -%}

{% if examples %}

Examples
--------
{{ normalize_text(examples) }}
{% endif -%}
"""
{%- endmacro -%}


{% macro ratio_func(ratio_name, processor_default, description, notes, examples) %}
cdef extern from "cpp_fuzz.hpp":
    double {{ ratio_name + "_no_process"      }}( proc_string, proc_string, double) nogil except +
    double {{ ratio_name + "_default_process" }}( proc_string, proc_string, double) nogil except +

def {{ ratio_name }}(s1, s2, processor={{ processor_default }}, score_cutoff=None):
    {{ ratio_help(processor_default, description, notes, examples) | indent(4) }}
    {{ ratio_impl(ratio_name) | indent(4)  }}
{%- endmacro -%}

from rapidfuzz.utils import default_process
from cpp_common cimport proc_string, is_valid_string, convert_string, hash_array, hash_sequence
from array import array
from libc.stdlib cimport malloc, free

cdef inline proc_string conv_sequence(seq):
    if is_valid_string(seq):
        return convert_string(seq)
    elif isinstance(seq, array):
        return hash_array(seq)
    else:
        return hash_sequence(seq)

{{ ratio_func(
    ratio_name="ratio",
    processor_default="None",
    description="""
    calculates a simple ratio between two strings. This is a simple wrapper
    for string_metric.normalized_levenshtein using the weights:
    - weights = (1, 1, 2)
    """,
    notes = """
    .. image:: img/ratio.svg
    """,
    examples="""
    >>> fuzz.ratio(\"this is a test\", \"this is a test!\")
    96.55171966552734
    """
    )
}}

{{ ratio_func(
    ratio_name="partial_ratio",
    processor_default="None",
    description="""
    calculates the fuzz.ratio of the optimal string alignment
    """,
    notes = """
    .. image:: img/partial_ratio.svg
    """,
    examples="""
    >>> fuzz.partial_ratio(\"this is a test\", \"this is a test!\")
    100.0
    """
    )
}}

{{ ratio_func(
    ratio_name="token_sort_ratio",
    processor_default="True",
    description="""
    sorts the words in the strings and calculates the fuzz.ratio between them
    """,
    notes = """
    .. image:: img/token_sort_ratio.svg
    """,
    examples="""
    >>> fuzz.token_sort_ratio(\"fuzzy wuzzy was a bear\", \"wuzzy fuzzy was a bear\")
    100.0
    """
    )
}}

{{ ratio_func(
    ratio_name="token_set_ratio",
    processor_default="True",
    description="""
    Compares the words in the strings based on unique and common words between them
    using fuzz.ratio
    """,
    notes = """
    .. image:: img/token_set_ratio.svg
    """,
    examples="""
    >>> fuzz.token_sort_ratio(\"fuzzy was a bear\", \"fuzzy fuzzy was a bear\")
    83.8709716796875
    >>> fuzz.token_set_ratio(\"fuzzy was a bear\", \"fuzzy fuzzy was a bear\")
    100.0
    """
    )
}}

{{ ratio_func(
    ratio_name="token_ratio",
    processor_default="True",
    description="""
    Helper method that returns the maximum of fuzz.token_set_ratio and fuzz.token_sort_ratio
    (faster than manually executing the two functions)
    """,
    notes = """
    .. image:: img/token_ratio.svg
    """
    )
}}

{{ ratio_func(
    ratio_name="partial_token_sort_ratio",
    processor_default="True",
    description="""
    sorts the words in the strings and calculates the fuzz.partial_ratio between them
    """,
    notes = """
    .. image:: img/partial_token_sort_ratio.svg
    """
    )
}}

{{ ratio_func(
    ratio_name="partial_token_set_ratio",
    processor_default="True",
    description="""
    Compares the words in the strings based on unique and common words between them
    using fuzz.partial_ratio
    """,
    notes = """
    .. image:: img/partial_token_set_ratio.svg
    """
    )
}}

{{ ratio_func(
    ratio_name="partial_token_ratio",
    processor_default="True",
    description="""
    Helper method that returns the maximum of fuzz.partial_token_set_ratio and
    fuzz.partial_token_sort_ratio (faster than manually executing the two functions)
    """,
    notes = """
    .. image:: img/partial_token_ratio.svg
    """
    )
}}

{{ ratio_func(
    ratio_name="WRatio",
    processor_default="True",
    description="""
    Calculates a weighted ratio based on the other ratio algorithms
    """,
    notes = """
    .. image:: img/WRatio.svg
    """
    )
}}

{{ ratio_func(
    ratio_name="QRatio",
    processor_default="True",
    description="""
    Calculates a quick ratio between two strings using fuzz.ratio.
    The only difference to fuzz.ratio is, that this preprocesses
    the strings by default.
    """,
    examples="""
    >>> fuzz.QRatio(\"this is a test\", \"THIS is a test!\")
    100.0
    """
    )
}}